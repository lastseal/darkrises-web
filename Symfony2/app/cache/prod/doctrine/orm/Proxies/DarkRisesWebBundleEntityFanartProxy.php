<?php

namespace Proxies;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class DarkRisesWebBundleEntityFanartProxy extends \DarkRises\WebBundle\Entity\Fanart implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }
    
    
    public function getAbsolutePath()
    {
        $this->__load();
        return parent::getAbsolutePath();
    }

    public function getWebPath()
    {
        $this->__load();
        return parent::getWebPath();
    }

    public function setAgregado($agregado)
    {
        $this->__load();
        return parent::setAgregado($agregado);
    }

    public function getAgregado()
    {
        $this->__load();
        return parent::getAgregado();
    }

    public function setAutor($autor)
    {
        $this->__load();
        return parent::setAutor($autor);
    }

    public function getAutor()
    {
        $this->__load();
        return parent::getAutor();
    }

    public function getId()
    {
        $this->__load();
        return parent::getId();
    }

    public function setLikeAddress($likeAddress)
    {
        $this->__load();
        return parent::setLikeAddress($likeAddress);
    }

    public function getLikeAddress()
    {
        $this->__load();
        return parent::getLikeAddress();
    }

    public function setShareFacebook($shareFacebook)
    {
        $this->__load();
        return parent::setShareFacebook($shareFacebook);
    }

    public function getShareFacebook()
    {
        $this->__load();
        return parent::getShareFacebook();
    }

    public function setShareTwitter($shareTwitter)
    {
        $this->__load();
        return parent::setShareTwitter($shareTwitter);
    }

    public function getShareTwitter()
    {
        $this->__load();
        return parent::getShareTwitter();
    }

    public function setShareGoogle($shareGoogle)
    {
        $this->__load();
        return parent::setShareGoogle($shareGoogle);
    }

    public function getShareGoogle()
    {
        $this->__load();
        return parent::getShareGoogle();
    }

    public function setCommentsFacebook($commentsFacebook)
    {
        $this->__load();
        return parent::setCommentsFacebook($commentsFacebook);
    }

    public function getCommentsFacebook()
    {
        $this->__load();
        return parent::getCommentsFacebook();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'agregado', 'autor', 'id', 'likeAddress', 'shareFacebook', 'shareTwitter', 'shareGoogle', 'commentsFacebook', 'path');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}